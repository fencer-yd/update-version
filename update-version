#!/usr/bin/env node

const fs = require('fs');
const exec = require('child_process').exec;

const packageJSON = require('../package.json');
/** package.json文件的version参数 */
let version = packageJSON.version
/** 命令行的所有参数 */
const options = process.argv;
/** 命令行的type参数 */
let type=null;
/** 新的version参数 */
let newVersion=null;
/** 本地旧分支名称 */
let oldBranchName = '';
/** 是否需要删除本地旧分支 */
let needDeleteOldbranch = false;

//判断命令行是否存在type参数或version参数进行逻辑处理
options.forEach((option) => {
  if (option.indexOf('--type') > -1) {
    console.log(option);
    type = option.replace('--type=', '');
  }
  if (option.indexOf('--version') > -1) {
    newVersion = option.replace('--version=', '');
  }
})

if(newVersion){ //存在设置version参数则改变原来的version
  version = newVersion;
}else if(type){ //不设置version则根据type来进行修改version
  version = handleType(version,type);
}else{
  version = null;
  console.log("-----------没有改变version-----------");
}

//修改了version则写入
if(version){
  packageJSON.version = version;
  packageJSON.bundleVersion = (+packageJSON.bundleVersion + 1).toString();
  //同步写入package.json文件
  fs.writeFileSync('package.json', JSON.stringify(packageJSON,null,2));
  console.log("-----------更新package的version为：%s参数成功-----------",version);
  pullRemote();
}

/**
 * 根据分支类型处理版本号version
 * @param {string} oldVersion 旧的版本号
 * @param {string} type 分支类型
 * @private
 */
function handleType(oldVersion,type){
  const oldVersionArr = oldVersion.split(".");
  //版本号第一位 如：1.2.3 则为 1
  const firstNum = +oldVersionArr[0];
  //版本号第二位 如：1.2.3 则为 2
  let secondNum = +oldVersionArr[1];
  //版本号第三位 如：1.2.3 则为 3
  let thirdNum = +oldVersionArr[2];

  switch (type) {
    case "release":
      //release分支的处理逻辑
      ++secondNum;
      break;

    case "hotfix":
      // 需要删除旧本地分支
      needDeleteOldbranch = true;
      //hotfix分支的处理逻辑
      ++thirdNum;
      break;

    default:
      break;
  }

  return firstNum+"."+secondNum+"."+thirdNum;
}

/**
 * 将package.json推送到远程新创建的分支
 */
function pullRemote(){
  const branch = type+"/"+version;
  // 缓存旧分支名称
  getCurrentBranch()
  // 创建新分支
  handleGitCreate(branch);
}

function getCurrentBranch() {
  exec('git branch --show-current', function (error, stdout, stderr) {
    oldBranchName = stdout.trim();
  })
}

/**
 * 创建新分支
 * @param {string} branch 分支名
 */
function handleGitCreate(branch){
  exec('git branch '+branch, function (error, stdout, stderr) {
    console.log("-----------创建新分支:%s DONE-----------",branch);
    //切换分支
    handleGitCheckOut(branch);
  });
}

/**
 * 切换分支
 * @param {string} branch 分支名
 */
function handleGitCheckOut(branch){
  exec('git checkout '+branch, function (error, stdout, stderr) {
    console.log("-----------切换新分支:%s DONE-----------",branch);
    //添加修改文件
    handleGitAdd("./package.json");
  });
}

/**
 * 添加修改文件
 * @param {string} filePath 文件路径
 */
function handleGitAdd(filePath){
  exec('git add '+filePath, function (error, stdout, stderr) {
    console.log("[添加修改文件输出：%s]",stdout);
    //提交文件
    handleGitCommit("feat: #N/A 更新package.json文件");
  });
}

/**
 * 提交文件
 * @param {string} prompt commit文字备注
 */
function handleGitCommit(prompt){
  const branch = type+"/"+version;
  exec('git commit -m "'+prompt+'"', function (error, stdout, stderr) {
    console.log("[提交修改文件输出：%s]",stdout);
    //推送分支
    handleGitPush(branch);
  });
}

/**
 * 推送分支
 * @param {string} branch 推送至哪个分支
 */
function handleGitPush(branch){
  exec('git push -u origin '+branch, function (error, stdout, stderr) {
    console.log("[推送至分支:%s输出：%s]",branch,stdout||error||stderr);
    console.log("-----------提交修改文件完成-----------");
    removeOldBranch()
  });
}


function removeOldBranch() {
  if (needDeleteOldbranch && oldBranchName) {
    exec(`git branch -D ${oldBranchName}`, function(error, stdout, stderr) {
      console.log("[删除本地旧分支:%s]", oldBranchName);
      console.log("-----------删除本地旧分支完成-----------");
    })
  }
}